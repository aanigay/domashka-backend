// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package tg is a generated GoMock package.
package tg

import (
	context "context"
	users "domashka-backend/internal/entity/users"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockredisClient is a mock of redisClient interface.
type MockredisClient struct {
	ctrl     *gomock.Controller
	recorder *MockredisClientMockRecorder
}

// MockredisClientMockRecorder is the mock recorder for MockredisClient.
type MockredisClientMockRecorder struct {
	mock *MockredisClient
}

// NewMockredisClient creates a new mock instance.
func NewMockredisClient(ctrl *gomock.Controller) *MockredisClient {
	mock := &MockredisClient{ctrl: ctrl}
	mock.recorder = &MockredisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisClient) EXPECT() *MockredisClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockredisClient) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockredisClientMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockredisClient)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockredisClient) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockredisClientMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockredisClient)(nil).Get), key)
}

// IsExpired mocks base method.
func (m *MockredisClient) IsExpired(key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockredisClientMockRecorder) IsExpired(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockredisClient)(nil).IsExpired), key)
}

// Set mocks base method.
func (m *MockredisClient) Set(key, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockredisClientMockRecorder) Set(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockredisClient)(nil).Set), key, value, ttl)
}

// MockjwtUsecase is a mock of jwtUsecase interface.
type MockjwtUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockjwtUsecaseMockRecorder
}

// MockjwtUsecaseMockRecorder is the mock recorder for MockjwtUsecase.
type MockjwtUsecaseMockRecorder struct {
	mock *MockjwtUsecase
}

// NewMockjwtUsecase creates a new mock instance.
func NewMockjwtUsecase(ctrl *gomock.Controller) *MockjwtUsecase {
	mock := &MockjwtUsecase{ctrl: ctrl}
	mock.recorder = &MockjwtUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjwtUsecase) EXPECT() *MockjwtUsecaseMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockjwtUsecase) GenerateJWT(userID int64, chefID *int64, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", userID, chefID, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockjwtUsecaseMockRecorder) GenerateJWT(userID, chefID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockjwtUsecase)(nil).GenerateJWT), userID, chefID, role)
}

// MockusersRepo is a mock of usersRepo interface.
type MockusersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockusersRepoMockRecorder
}

// MockusersRepoMockRecorder is the mock recorder for MockusersRepo.
type MockusersRepoMockRecorder struct {
	mock *MockusersRepo
}

// NewMockusersRepo creates a new mock instance.
func NewMockusersRepo(ctrl *gomock.Controller) *MockusersRepo {
	mock := &MockusersRepo{ctrl: ctrl}
	mock.recorder = &MockusersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersRepo) EXPECT() *MockusersRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockusersRepo) Create(ctx context.Context, user *users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockusersRepoMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockusersRepo)(nil).Create), ctx, user)
}

// GetByPhone mocks base method.
func (m *MockusersRepo) GetByPhone(ctx context.Context, phone string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", ctx, phone)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockusersRepoMockRecorder) GetByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockusersRepo)(nil).GetByPhone), ctx, phone)
}

// Update mocks base method.
func (m *MockusersRepo) Update(ctx context.Context, id int64, user users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockusersRepoMockRecorder) Update(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockusersRepo)(nil).Update), ctx, id, user)
}
