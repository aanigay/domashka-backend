// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	cart "domashka-backend/internal/entity/cart"
	chefs "domashka-backend/internal/entity/chefs"
	dishes "domashka-backend/internal/entity/dishes"
	geo "domashka-backend/internal/entity/geo"
	orders "domashka-backend/internal/entity/orders"
	reviews "domashka-backend/internal/entity/reviews"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockgeoUsecase is a mock of geoUsecase interface.
type MockgeoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockgeoUsecaseMockRecorder
}

// MockgeoUsecaseMockRecorder is the mock recorder for MockgeoUsecase.
type MockgeoUsecaseMockRecorder struct {
	mock *MockgeoUsecase
}

// NewMockgeoUsecase creates a new mock instance.
func NewMockgeoUsecase(ctrl *gomock.Controller) *MockgeoUsecase {
	mock := &MockgeoUsecase{ctrl: ctrl}
	mock.recorder = &MockgeoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoUsecase) EXPECT() *MockgeoUsecaseMockRecorder {
	return m.recorder
}

// GetLastUpdatedClientAddress mocks base method.
func (m *MockgeoUsecase) GetLastUpdatedClientAddress(ctx context.Context, clientID int64) (*geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUpdatedClientAddress", ctx, clientID)
	ret0, _ := ret[0].(*geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUpdatedClientAddress indicates an expected call of GetLastUpdatedClientAddress.
func (mr *MockgeoUsecaseMockRecorder) GetLastUpdatedClientAddress(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpdatedClientAddress", reflect.TypeOf((*MockgeoUsecase)(nil).GetLastUpdatedClientAddress), ctx, clientID)
}

// MockcartUsecase is a mock of cartUsecase interface.
type MockcartUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockcartUsecaseMockRecorder
}

// MockcartUsecaseMockRecorder is the mock recorder for MockcartUsecase.
type MockcartUsecaseMockRecorder struct {
	mock *MockcartUsecase
}

// NewMockcartUsecase creates a new mock instance.
func NewMockcartUsecase(ctrl *gomock.Controller) *MockcartUsecase {
	mock := &MockcartUsecase{ctrl: ctrl}
	mock.recorder = &MockcartUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcartUsecase) EXPECT() *MockcartUsecaseMockRecorder {
	return m.recorder
}

// GetCartItems mocks base method.
func (m *MockcartUsecase) GetCartItems(ctx context.Context, userID int64) ([]cart.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", ctx, userID)
	ret0, _ := ret[0].([]cart.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockcartUsecaseMockRecorder) GetCartItems(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockcartUsecase)(nil).GetCartItems), ctx, userID)
}

// MockshiftsRepo is a mock of shiftsRepo interface.
type MockshiftsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockshiftsRepoMockRecorder
}

// MockshiftsRepoMockRecorder is the mock recorder for MockshiftsRepo.
type MockshiftsRepoMockRecorder struct {
	mock *MockshiftsRepo
}

// NewMockshiftsRepo creates a new mock instance.
func NewMockshiftsRepo(ctrl *gomock.Controller) *MockshiftsRepo {
	mock := &MockshiftsRepo{ctrl: ctrl}
	mock.recorder = &MockshiftsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshiftsRepo) EXPECT() *MockshiftsRepoMockRecorder {
	return m.recorder
}

// AddToTotalProfit mocks base method.
func (m *MockshiftsRepo) AddToTotalProfit(ctx context.Context, shiftID int64, profit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToTotalProfit", ctx, shiftID, profit)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToTotalProfit indicates an expected call of AddToTotalProfit.
func (mr *MockshiftsRepoMockRecorder) AddToTotalProfit(ctx, shiftID, profit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToTotalProfit", reflect.TypeOf((*MockshiftsRepo)(nil).AddToTotalProfit), ctx, shiftID, profit)
}

// GetActiveShiftIDByChefID mocks base method.
func (m *MockshiftsRepo) GetActiveShiftIDByChefID(ctx context.Context, chefID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveShiftIDByChefID", ctx, chefID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveShiftIDByChefID indicates an expected call of GetActiveShiftIDByChefID.
func (mr *MockshiftsRepoMockRecorder) GetActiveShiftIDByChefID(ctx, chefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveShiftIDByChefID", reflect.TypeOf((*MockshiftsRepo)(nil).GetActiveShiftIDByChefID), ctx, chefID)
}

// MockordersRepo is a mock of ordersRepo interface.
type MockordersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockordersRepoMockRecorder
}

// MockordersRepoMockRecorder is the mock recorder for MockordersRepo.
type MockordersRepoMockRecorder struct {
	mock *MockordersRepo
}

// NewMockordersRepo creates a new mock instance.
func NewMockordersRepo(ctrl *gomock.Controller) *MockordersRepo {
	mock := &MockordersRepo{ctrl: ctrl}
	mock.recorder = &MockordersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersRepo) EXPECT() *MockordersRepoMockRecorder {
	return m.recorder
}

// AddCartItemToOrder mocks base method.
func (m *MockordersRepo) AddCartItemToOrder(ctx context.Context, cartItem *cart.CartItem, orderID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCartItemToOrder", ctx, cartItem, orderID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCartItemToOrder indicates an expected call of AddCartItemToOrder.
func (mr *MockordersRepoMockRecorder) AddCartItemToOrder(ctx, cartItem, orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCartItemToOrder", reflect.TypeOf((*MockordersRepo)(nil).AddCartItemToOrder), ctx, cartItem, orderID, userID)
}

// CreateOrder mocks base method.
func (m *MockordersRepo) CreateOrder(ctx context.Context, chefID, shiftID, userID, clientAddressID int64, totalCost float32, leaveByTheDoor, callBeforehand bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, chefID, shiftID, userID, clientAddressID, totalCost, leaveByTheDoor, callBeforehand)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockordersRepoMockRecorder) CreateOrder(ctx, chefID, shiftID, userID, clientAddressID, totalCost, leaveByTheDoor, callBeforehand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockordersRepo)(nil).CreateOrder), ctx, chefID, shiftID, userID, clientAddressID, totalCost, leaveByTheDoor, callBeforehand)
}

// GetCartItems mocks base method.
func (m *MockordersRepo) GetCartItems(ctx context.Context, userID int64) ([]cart.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", ctx, userID)
	ret0, _ := ret[0].([]cart.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockordersRepoMockRecorder) GetCartItems(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockordersRepo)(nil).GetCartItems), ctx, userID)
}

// GetCartItemsByOrderID mocks base method.
func (m *MockordersRepo) GetCartItemsByOrderID(ctx context.Context, orderID int64) ([]cart.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]cart.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByOrderID indicates an expected call of GetCartItemsByOrderID.
func (mr *MockordersRepoMockRecorder) GetCartItemsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByOrderID", reflect.TypeOf((*MockordersRepo)(nil).GetCartItemsByOrderID), ctx, orderID)
}

// GetOrderByID mocks base method.
func (m *MockordersRepo) GetOrderByID(ctx context.Context, orderID int64) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockordersRepoMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockordersRepo)(nil).GetOrderByID), ctx, orderID)
}

// GetOrderedDishesIDsAndChefsIDs mocks base method.
func (m *MockordersRepo) GetOrderedDishesIDsAndChefsIDs(ctx context.Context, userID int64, dishesLimit, chefsLimit int) ([]int64, []int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderedDishesIDsAndChefsIDs", ctx, userID, dishesLimit, chefsLimit)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].([]int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderedDishesIDsAndChefsIDs indicates an expected call of GetOrderedDishesIDsAndChefsIDs.
func (mr *MockordersRepoMockRecorder) GetOrderedDishesIDsAndChefsIDs(ctx, userID, dishesLimit, chefsLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderedDishesIDsAndChefsIDs", reflect.TypeOf((*MockordersRepo)(nil).GetOrderedDishesIDsAndChefsIDs), ctx, userID, dishesLimit, chefsLimit)
}

// GetOrdersByShiftID mocks base method.
func (m *MockordersRepo) GetOrdersByShiftID(ctx context.Context, shiftID int64) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByShiftID", ctx, shiftID)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByShiftID indicates an expected call of GetOrdersByShiftID.
func (mr *MockordersRepoMockRecorder) GetOrdersByShiftID(ctx, shiftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByShiftID", reflect.TypeOf((*MockordersRepo)(nil).GetOrdersByShiftID), ctx, shiftID)
}

// GetOrdersByUserID mocks base method.
func (m *MockordersRepo) GetOrdersByUserID(ctx context.Context, userID int64) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockordersRepoMockRecorder) GetOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockordersRepo)(nil).GetOrdersByUserID), ctx, userID)
}

// GetShiftIDByOrderID mocks base method.
func (m *MockordersRepo) GetShiftIDByOrderID(ctx context.Context, orderID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShiftIDByOrderID", ctx, orderID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShiftIDByOrderID indicates an expected call of GetShiftIDByOrderID.
func (mr *MockordersRepoMockRecorder) GetShiftIDByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShiftIDByOrderID", reflect.TypeOf((*MockordersRepo)(nil).GetShiftIDByOrderID), ctx, orderID)
}

// GetStatus mocks base method.
func (m *MockordersRepo) GetStatus(ctx context.Context, orderID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, orderID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockordersRepoMockRecorder) GetStatus(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockordersRepo)(nil).GetStatus), ctx, orderID)
}

// SetStatus mocks base method.
func (m *MockordersRepo) SetStatus(ctx context.Context, orderID int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockordersRepoMockRecorder) SetStatus(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockordersRepo)(nil).SetStatus), ctx, orderID, status)
}

// MockdishesUsecase is a mock of dishesUsecase interface.
type MockdishesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockdishesUsecaseMockRecorder
}

// MockdishesUsecaseMockRecorder is the mock recorder for MockdishesUsecase.
type MockdishesUsecaseMockRecorder struct {
	mock *MockdishesUsecase
}

// NewMockdishesUsecase creates a new mock instance.
func NewMockdishesUsecase(ctrl *gomock.Controller) *MockdishesUsecase {
	mock := &MockdishesUsecase{ctrl: ctrl}
	mock.recorder = &MockdishesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdishesUsecase) EXPECT() *MockdishesUsecaseMockRecorder {
	return m.recorder
}

// GetDishByID mocks base method.
func (m *MockdishesUsecase) GetDishByID(ctx context.Context, dishID int64) (*dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishByID", ctx, dishID)
	ret0, _ := ret[0].(*dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishByID indicates an expected call of GetDishByID.
func (mr *MockdishesUsecaseMockRecorder) GetDishByID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishByID", reflect.TypeOf((*MockdishesUsecase)(nil).GetDishByID), ctx, dishID)
}

// GetDishRatingByID mocks base method.
func (m *MockdishesUsecase) GetDishRatingByID(ctx context.Context, dishID int64) (*dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishRatingByID", ctx, dishID)
	ret0, _ := ret[0].(*dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishRatingByID indicates an expected call of GetDishRatingByID.
func (mr *MockdishesUsecaseMockRecorder) GetDishRatingByID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishRatingByID", reflect.TypeOf((*MockdishesUsecase)(nil).GetDishRatingByID), ctx, dishID)
}

// MockchefsUsecase is a mock of chefsUsecase interface.
type MockchefsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockchefsUsecaseMockRecorder
}

// MockchefsUsecaseMockRecorder is the mock recorder for MockchefsUsecase.
type MockchefsUsecaseMockRecorder struct {
	mock *MockchefsUsecase
}

// NewMockchefsUsecase creates a new mock instance.
func NewMockchefsUsecase(ctrl *gomock.Controller) *MockchefsUsecase {
	mock := &MockchefsUsecase{ctrl: ctrl}
	mock.recorder = &MockchefsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchefsUsecase) EXPECT() *MockchefsUsecaseMockRecorder {
	return m.recorder
}

// GetChefByID mocks base method.
func (m *MockchefsUsecase) GetChefByID(ctx context.Context, chefID int64) (*chefs.Chef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChefByID", ctx, chefID)
	ret0, _ := ret[0].(*chefs.Chef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChefByID indicates an expected call of GetChefByID.
func (mr *MockchefsUsecaseMockRecorder) GetChefByID(ctx, chefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChefByID", reflect.TypeOf((*MockchefsUsecase)(nil).GetChefByID), ctx, chefID)
}

// MockreviewUsecase is a mock of reviewUsecase interface.
type MockreviewUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockreviewUsecaseMockRecorder
}

// MockreviewUsecaseMockRecorder is the mock recorder for MockreviewUsecase.
type MockreviewUsecaseMockRecorder struct {
	mock *MockreviewUsecase
}

// NewMockreviewUsecase creates a new mock instance.
func NewMockreviewUsecase(ctrl *gomock.Controller) *MockreviewUsecase {
	mock := &MockreviewUsecase{ctrl: ctrl}
	mock.recorder = &MockreviewUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreviewUsecase) EXPECT() *MockreviewUsecaseMockRecorder {
	return m.recorder
}

// GetReviewByOrderAndUserID mocks base method.
func (m *MockreviewUsecase) GetReviewByOrderAndUserID(ctx context.Context, chefID, userID int64) (*reviews.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByOrderAndUserID", ctx, chefID, userID)
	ret0, _ := ret[0].(*reviews.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByOrderAndUserID indicates an expected call of GetReviewByOrderAndUserID.
func (mr *MockreviewUsecaseMockRecorder) GetReviewByOrderAndUserID(ctx, chefID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByOrderAndUserID", reflect.TypeOf((*MockreviewUsecase)(nil).GetReviewByOrderAndUserID), ctx, chefID, userID)
}
