// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package favorites is a generated GoMock package.
package favorites

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfavRepo is a mock of favRepo interface.
type MockfavRepo struct {
	ctrl     *gomock.Controller
	recorder *MockfavRepoMockRecorder
}

// MockfavRepoMockRecorder is the mock recorder for MockfavRepo.
type MockfavRepoMockRecorder struct {
	mock *MockfavRepo
}

// NewMockfavRepo creates a new mock instance.
func NewMockfavRepo(ctrl *gomock.Controller) *MockfavRepo {
	mock := &MockfavRepo{ctrl: ctrl}
	mock.recorder = &MockfavRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfavRepo) EXPECT() *MockfavRepoMockRecorder {
	return m.recorder
}

// AddFavoriteChef mocks base method.
func (m *MockfavRepo) AddFavoriteChef(ctx context.Context, chefID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteChef", ctx, chefID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteChef indicates an expected call of AddFavoriteChef.
func (mr *MockfavRepoMockRecorder) AddFavoriteChef(ctx, chefID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteChef", reflect.TypeOf((*MockfavRepo)(nil).AddFavoriteChef), ctx, chefID, userID)
}

// AddFavoriteDish mocks base method.
func (m *MockfavRepo) AddFavoriteDish(ctx context.Context, dishID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteDish", ctx, dishID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteDish indicates an expected call of AddFavoriteDish.
func (mr *MockfavRepoMockRecorder) AddFavoriteDish(ctx, dishID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteDish", reflect.TypeOf((*MockfavRepo)(nil).AddFavoriteDish), ctx, dishID, userID)
}

// RemoveFavoriteChef mocks base method.
func (m *MockfavRepo) RemoveFavoriteChef(ctx context.Context, chefID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavoriteChef", ctx, chefID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavoriteChef indicates an expected call of RemoveFavoriteChef.
func (mr *MockfavRepoMockRecorder) RemoveFavoriteChef(ctx, chefID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavoriteChef", reflect.TypeOf((*MockfavRepo)(nil).RemoveFavoriteChef), ctx, chefID, userID)
}

// RemoveFavoriteDish mocks base method.
func (m *MockfavRepo) RemoveFavoriteDish(ctx context.Context, dishID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavoriteDish", ctx, dishID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavoriteDish indicates an expected call of RemoveFavoriteDish.
func (mr *MockfavRepoMockRecorder) RemoveFavoriteDish(ctx, dishID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavoriteDish", reflect.TypeOf((*MockfavRepo)(nil).RemoveFavoriteDish), ctx, dishID, userID)
}
