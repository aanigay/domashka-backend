// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package dishes is a generated GoMock package.
package dishes

import (
	context "context"
	dishes "domashka-backend/internal/entity/dishes"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdishRepo is a mock of dishRepo interface.
type MockdishRepo struct {
	ctrl     *gomock.Controller
	recorder *MockdishRepoMockRecorder
}

// MockdishRepoMockRecorder is the mock recorder for MockdishRepo.
type MockdishRepoMockRecorder struct {
	mock *MockdishRepo
}

// NewMockdishRepo creates a new mock instance.
func NewMockdishRepo(ctrl *gomock.Controller) *MockdishRepo {
	mock := &MockdishRepo{ctrl: ctrl}
	mock.recorder = &MockdishRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdishRepo) EXPECT() *MockdishRepoMockRecorder {
	return m.recorder
}

// CreateDish mocks base method.
func (m *MockdishRepo) CreateDish(ctx context.Context, dish *dishes.Dish, nutrition *dishes.Nutrition, sizes []dishes.Size, ingredients []dishes.Ingredient) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDish", ctx, dish, nutrition, sizes, ingredients)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDish indicates an expected call of CreateDish.
func (mr *MockdishRepoMockRecorder) CreateDish(ctx, dish, nutrition, sizes, ingredients interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDish", reflect.TypeOf((*MockdishRepo)(nil).CreateDish), ctx, dish, nutrition, sizes, ingredients)
}

// DeleteDish mocks base method.
func (m *MockdishRepo) DeleteDish(ctx context.Context, dishID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDish", ctx, dishID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDish indicates an expected call of DeleteDish.
func (mr *MockdishRepoMockRecorder) DeleteDish(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDish", reflect.TypeOf((*MockdishRepo)(nil).DeleteDish), ctx, dishID)
}

// GetAll mocks base method.
func (m *MockdishRepo) GetAll(ctx context.Context) ([]dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockdishRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockdishRepo)(nil).GetAll), ctx)
}

// GetAllCategories mocks base method.
func (m *MockdishRepo) GetAllCategories(ctx context.Context) ([]dishes.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]dishes.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockdishRepoMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockdishRepo)(nil).GetAllCategories), ctx)
}

// GetAllIngredients mocks base method.
func (m *MockdishRepo) GetAllIngredients(ctx context.Context) ([]dishes.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIngredients", ctx)
	ret0, _ := ret[0].([]dishes.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIngredients indicates an expected call of GetAllIngredients.
func (mr *MockdishRepoMockRecorder) GetAllIngredients(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIngredients", reflect.TypeOf((*MockdishRepo)(nil).GetAllIngredients), ctx)
}

// GetCategoryTitleByDishID mocks base method.
func (m *MockdishRepo) GetCategoryTitleByDishID(ctx context.Context, dishID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTitleByDishID", ctx, dishID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTitleByDishID indicates an expected call of GetCategoryTitleByDishID.
func (mr *MockdishRepoMockRecorder) GetCategoryTitleByDishID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTitleByDishID", reflect.TypeOf((*MockdishRepo)(nil).GetCategoryTitleByDishID), ctx, dishID)
}

// GetDishByID mocks base method.
func (m *MockdishRepo) GetDishByID(ctx context.Context, dishID int64) (*dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishByID", ctx, dishID)
	ret0, _ := ret[0].(*dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishByID indicates an expected call of GetDishByID.
func (mr *MockdishRepoMockRecorder) GetDishByID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishByID", reflect.TypeOf((*MockdishRepo)(nil).GetDishByID), ctx, dishID)
}

// GetDishRatingByID mocks base method.
func (m *MockdishRepo) GetDishRatingByID(ctx context.Context, dishID int64) (*dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishRatingByID", ctx, dishID)
	ret0, _ := ret[0].(*dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishRatingByID indicates an expected call of GetDishRatingByID.
func (mr *MockdishRepoMockRecorder) GetDishRatingByID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishRatingByID", reflect.TypeOf((*MockdishRepo)(nil).GetDishRatingByID), ctx, dishID)
}

// GetDishSizesByDishID mocks base method.
func (m *MockdishRepo) GetDishSizesByDishID(ctx context.Context, dishID int64) ([]dishes.Size, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishSizesByDishID", ctx, dishID)
	ret0, _ := ret[0].([]dishes.Size)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishSizesByDishID indicates an expected call of GetDishSizesByDishID.
func (mr *MockdishRepoMockRecorder) GetDishSizesByDishID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishSizesByDishID", reflect.TypeOf((*MockdishRepo)(nil).GetDishSizesByDishID), ctx, dishID)
}

// GetDishesByChefID mocks base method.
func (m *MockdishRepo) GetDishesByChefID(ctx context.Context, chefID int64, limit *int) ([]dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishesByChefID", ctx, chefID, limit)
	ret0, _ := ret[0].([]dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishesByChefID indicates an expected call of GetDishesByChefID.
func (mr *MockdishRepoMockRecorder) GetDishesByChefID(ctx, chefID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishesByChefID", reflect.TypeOf((*MockdishRepo)(nil).GetDishesByChefID), ctx, chefID, limit)
}

// GetIngredientsByDishID mocks base method.
func (m *MockdishRepo) GetIngredientsByDishID(ctx context.Context, dishID int64) ([]dishes.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientsByDishID", ctx, dishID)
	ret0, _ := ret[0].([]dishes.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientsByDishID indicates an expected call of GetIngredientsByDishID.
func (mr *MockdishRepoMockRecorder) GetIngredientsByDishID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientsByDishID", reflect.TypeOf((*MockdishRepo)(nil).GetIngredientsByDishID), ctx, dishID)
}

// GetNutritionByDishID mocks base method.
func (m *MockdishRepo) GetNutritionByDishID(ctx context.Context, dishID int64) (*dishes.Nutrition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNutritionByDishID", ctx, dishID)
	ret0, _ := ret[0].(*dishes.Nutrition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNutritionByDishID indicates an expected call of GetNutritionByDishID.
func (mr *MockdishRepoMockRecorder) GetNutritionByDishID(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNutritionByDishID", reflect.TypeOf((*MockdishRepo)(nil).GetNutritionByDishID), ctx, dishID)
}

// GetTopDishes mocks base method.
func (m *MockdishRepo) GetTopDishes(ctx context.Context, limit int) ([]dishes.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopDishes", ctx, limit)
	ret0, _ := ret[0].([]dishes.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopDishes indicates an expected call of GetTopDishes.
func (mr *MockdishRepoMockRecorder) GetTopDishes(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopDishes", reflect.TypeOf((*MockdishRepo)(nil).GetTopDishes), ctx, limit)
}

// SetDishImageURL mocks base method.
func (m *MockdishRepo) SetDishImageURL(ctx context.Context, dishID int64, imageURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDishImageURL", ctx, dishID, imageURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDishImageURL indicates an expected call of SetDishImageURL.
func (mr *MockdishRepoMockRecorder) SetDishImageURL(ctx, dishID, imageURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDishImageURL", reflect.TypeOf((*MockdishRepo)(nil).SetDishImageURL), ctx, dishID, imageURL)
}

// SetIngredientImageURL mocks base method.
func (m *MockdishRepo) SetIngredientImageURL(ctx context.Context, ingredientID int64, imageURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIngredientImageURL", ctx, ingredientID, imageURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIngredientImageURL indicates an expected call of SetIngredientImageURL.
func (mr *MockdishRepoMockRecorder) SetIngredientImageURL(ctx, ingredientID, imageURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIngredientImageURL", reflect.TypeOf((*MockdishRepo)(nil).SetIngredientImageURL), ctx, ingredientID, imageURL)
}

// SetRating mocks base method.
func (m *MockdishRepo) SetRating(ctx context.Context, dishID int64, rating float32, reviewsCount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRating", ctx, dishID, rating, reviewsCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRating indicates an expected call of SetRating.
func (mr *MockdishRepoMockRecorder) SetRating(ctx, dishID, rating, reviewsCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRating", reflect.TypeOf((*MockdishRepo)(nil).SetRating), ctx, dishID, rating, reviewsCount)
}

// Mocks3Client is a mock of s3Client interface.
type Mocks3Client struct {
	ctrl     *gomock.Controller
	recorder *Mocks3ClientMockRecorder
}

// Mocks3ClientMockRecorder is the mock recorder for Mocks3Client.
type Mocks3ClientMockRecorder struct {
	mock *Mocks3Client
}

// NewMocks3Client creates a new mock instance.
func NewMocks3Client(ctrl *gomock.Controller) *Mocks3Client {
	mock := &Mocks3Client{ctrl: ctrl}
	mock.recorder = &Mocks3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks3Client) EXPECT() *Mocks3ClientMockRecorder {
	return m.recorder
}

// UploadPicture mocks base method.
func (m *Mocks3Client) UploadPicture(ctx context.Context, filePrefix string, fileHeader *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPicture", ctx, filePrefix, fileHeader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPicture indicates an expected call of UploadPicture.
func (mr *Mocks3ClientMockRecorder) UploadPicture(ctx, filePrefix, fileHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPicture", reflect.TypeOf((*Mocks3Client)(nil).UploadPicture), ctx, filePrefix, fileHeader)
}
