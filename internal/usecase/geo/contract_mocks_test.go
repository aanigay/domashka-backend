// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package geo is a generated GoMock package.
package geo

import (
	context "context"
	geo "domashka-backend/internal/entity/geo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGeoRepository is a mock of GeoRepository interface.
type MockGeoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGeoRepositoryMockRecorder
}

// MockGeoRepositoryMockRecorder is the mock recorder for MockGeoRepository.
type MockGeoRepositoryMockRecorder struct {
	mock *MockGeoRepository
}

// NewMockGeoRepository creates a new mock instance.
func NewMockGeoRepository(ctrl *gomock.Controller) *MockGeoRepository {
	mock := &MockGeoRepository{ctrl: ctrl}
	mock.recorder = &MockGeoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoRepository) EXPECT() *MockGeoRepositoryMockRecorder {
	return m.recorder
}

// AddChefAddress mocks base method.
func (m *MockGeoRepository) AddChefAddress(ctx context.Context, chefID int, address geo.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChefAddress", ctx, chefID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChefAddress indicates an expected call of AddChefAddress.
func (mr *MockGeoRepositoryMockRecorder) AddChefAddress(ctx, chefID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChefAddress", reflect.TypeOf((*MockGeoRepository)(nil).AddChefAddress), ctx, chefID, address)
}

// AddClientAddress mocks base method.
func (m *MockGeoRepository) AddClientAddress(ctx context.Context, clientID int, address geo.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientAddress", ctx, clientID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientAddress indicates an expected call of AddClientAddress.
func (mr *MockGeoRepositoryMockRecorder) AddClientAddress(ctx, clientID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientAddress", reflect.TypeOf((*MockGeoRepository)(nil).AddClientAddress), ctx, clientID, address)
}

// GetAddressByID mocks base method.
func (m *MockGeoRepository) GetAddressByID(ctx context.Context, id int64) (*geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByID", ctx, id)
	ret0, _ := ret[0].(*geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByID indicates an expected call of GetAddressByID.
func (mr *MockGeoRepositoryMockRecorder) GetAddressByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByID", reflect.TypeOf((*MockGeoRepository)(nil).GetAddressByID), ctx, id)
}

// GetChefAddress mocks base method.
func (m *MockGeoRepository) GetChefAddress(ctx context.Context, chefID int) (geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChefAddress", ctx, chefID)
	ret0, _ := ret[0].(geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChefAddress indicates an expected call of GetChefAddress.
func (mr *MockGeoRepositoryMockRecorder) GetChefAddress(ctx, chefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChefAddress", reflect.TypeOf((*MockGeoRepository)(nil).GetChefAddress), ctx, chefID)
}

// GetChefsAddrByRange mocks base method.
func (m *MockGeoRepository) GetChefsAddrByRange(ctx context.Context, clientAddressID int, radius float64) ([]geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChefsAddrByRange", ctx, clientAddressID, radius)
	ret0, _ := ret[0].([]geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChefsAddrByRange indicates an expected call of GetChefsAddrByRange.
func (mr *MockGeoRepositoryMockRecorder) GetChefsAddrByRange(ctx, clientAddressID, radius interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChefsAddrByRange", reflect.TypeOf((*MockGeoRepository)(nil).GetChefsAddrByRange), ctx, clientAddressID, radius)
}

// GetClientAddresses mocks base method.
func (m *MockGeoRepository) GetClientAddresses(ctx context.Context, clientID int) ([]geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientAddresses", ctx, clientID)
	ret0, _ := ret[0].([]geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientAddresses indicates an expected call of GetClientAddresses.
func (mr *MockGeoRepositoryMockRecorder) GetClientAddresses(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientAddresses", reflect.TypeOf((*MockGeoRepository)(nil).GetClientAddresses), ctx, clientID)
}

// GetClientsAddrByRange mocks base method.
func (m *MockGeoRepository) GetClientsAddrByRange(ctx context.Context, chefID int, radius float64) ([]geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsAddrByRange", ctx, chefID, radius)
	ret0, _ := ret[0].([]geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsAddrByRange indicates an expected call of GetClientsAddrByRange.
func (mr *MockGeoRepositoryMockRecorder) GetClientsAddrByRange(ctx, chefID, radius interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsAddrByRange", reflect.TypeOf((*MockGeoRepository)(nil).GetClientsAddrByRange), ctx, chefID, radius)
}

// GetLastUpdatedClientAddress mocks base method.
func (m *MockGeoRepository) GetLastUpdatedClientAddress(ctx context.Context, clientID int64) (*geo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUpdatedClientAddress", ctx, clientID)
	ret0, _ := ret[0].(*geo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUpdatedClientAddress indicates an expected call of GetLastUpdatedClientAddress.
func (mr *MockGeoRepositoryMockRecorder) GetLastUpdatedClientAddress(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpdatedClientAddress", reflect.TypeOf((*MockGeoRepository)(nil).GetLastUpdatedClientAddress), ctx, clientID)
}

// PushClientAddress mocks base method.
func (m *MockGeoRepository) PushClientAddress(ctx context.Context, addressID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushClientAddress", ctx, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushClientAddress indicates an expected call of PushClientAddress.
func (mr *MockGeoRepositoryMockRecorder) PushClientAddress(ctx, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushClientAddress", reflect.TypeOf((*MockGeoRepository)(nil).PushClientAddress), ctx, addressID)
}

// UpdateChefAddress mocks base method.
func (m *MockGeoRepository) UpdateChefAddress(ctx context.Context, chefID int, address geo.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChefAddress", ctx, chefID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChefAddress indicates an expected call of UpdateChefAddress.
func (mr *MockGeoRepositoryMockRecorder) UpdateChefAddress(ctx, chefID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChefAddress", reflect.TypeOf((*MockGeoRepository)(nil).UpdateChefAddress), ctx, chefID, address)
}

// UpdateClientAddress mocks base method.
func (m *MockGeoRepository) UpdateClientAddress(ctx context.Context, clientID, addressID int, address geo.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientAddress", ctx, clientID, addressID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientAddress indicates an expected call of UpdateClientAddress.
func (mr *MockGeoRepositoryMockRecorder) UpdateClientAddress(ctx, clientID, addressID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientAddress", reflect.TypeOf((*MockGeoRepository)(nil).UpdateClientAddress), ctx, clientID, addressID, address)
}
