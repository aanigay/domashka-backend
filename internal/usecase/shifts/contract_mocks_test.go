// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package shifts is a generated GoMock package.
package shifts

import (
	context "context"
	shifts "domashka-backend/internal/entity/shifts"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShiftsRepo is a mock of ShiftsRepo interface.
type MockShiftsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockShiftsRepoMockRecorder
}

// MockShiftsRepoMockRecorder is the mock recorder for MockShiftsRepo.
type MockShiftsRepoMockRecorder struct {
	mock *MockShiftsRepo
}

// NewMockShiftsRepo creates a new mock instance.
func NewMockShiftsRepo(ctrl *gomock.Controller) *MockShiftsRepo {
	mock := &MockShiftsRepo{ctrl: ctrl}
	mock.recorder = &MockShiftsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShiftsRepo) EXPECT() *MockShiftsRepoMockRecorder {
	return m.recorder
}

// CloseActiveShiftByChefID mocks base method.
func (m *MockShiftsRepo) CloseActiveShiftByChefID(ctx context.Context, chefID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseActiveShiftByChefID", ctx, chefID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseActiveShiftByChefID indicates an expected call of CloseActiveShiftByChefID.
func (mr *MockShiftsRepoMockRecorder) CloseActiveShiftByChefID(ctx, chefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseActiveShiftByChefID", reflect.TypeOf((*MockShiftsRepo)(nil).CloseActiveShiftByChefID), ctx, chefID)
}

// GetActiveShiftByChefID mocks base method.
func (m *MockShiftsRepo) GetActiveShiftByChefID(ctx context.Context, chefID int64) (*shifts.Shift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveShiftByChefID", ctx, chefID)
	ret0, _ := ret[0].(*shifts.Shift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveShiftByChefID indicates an expected call of GetActiveShiftByChefID.
func (mr *MockShiftsRepoMockRecorder) GetActiveShiftByChefID(ctx, chefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveShiftByChefID", reflect.TypeOf((*MockShiftsRepo)(nil).GetActiveShiftByChefID), ctx, chefID)
}

// OpenShift mocks base method.
func (m *MockShiftsRepo) OpenShift(ctx context.Context, chefID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenShift", ctx, chefID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenShift indicates an expected call of OpenShift.
func (mr *MockShiftsRepoMockRecorder) OpenShift(ctx, chefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenShift", reflect.TypeOf((*MockShiftsRepo)(nil).OpenShift), ctx, chefID)
}
