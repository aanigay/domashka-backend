// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package reviews is a generated GoMock package.
package reviews

import (
	context "context"
	cart "domashka-backend/internal/entity/cart"
	reviews "domashka-backend/internal/entity/reviews"
	users "domashka-backend/internal/entity/users"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockreviewRepo is a mock of reviewRepo interface.
type MockreviewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockreviewRepoMockRecorder
}

// MockreviewRepoMockRecorder is the mock recorder for MockreviewRepo.
type MockreviewRepoMockRecorder struct {
	mock *MockreviewRepo
}

// NewMockreviewRepo creates a new mock instance.
func NewMockreviewRepo(ctrl *gomock.Controller) *MockreviewRepo {
	mock := &MockreviewRepo{ctrl: ctrl}
	mock.recorder = &MockreviewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreviewRepo) EXPECT() *MockreviewRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockreviewRepo) Create(ctx context.Context, rv *reviews.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockreviewRepoMockRecorder) Create(ctx, rv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockreviewRepo)(nil).Create), ctx, rv)
}

// GetByID mocks base method.
func (m *MockreviewRepo) GetByID(ctx context.Context, id int64) (*reviews.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*reviews.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockreviewRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockreviewRepo)(nil).GetByID), ctx, id)
}

// GetReviewByOrderAndUserID mocks base method.
func (m *MockreviewRepo) GetReviewByOrderAndUserID(ctx context.Context, chefID, userID int64) (*reviews.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByOrderAndUserID", ctx, chefID, userID)
	ret0, _ := ret[0].(*reviews.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByOrderAndUserID indicates an expected call of GetReviewByOrderAndUserID.
func (mr *MockreviewRepoMockRecorder) GetReviewByOrderAndUserID(ctx, chefID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByOrderAndUserID", reflect.TypeOf((*MockreviewRepo)(nil).GetReviewByOrderAndUserID), ctx, chefID, userID)
}

// ListByChef mocks base method.
func (m *MockreviewRepo) ListByChef(ctx context.Context, chefID int64, includeOnly bool, limit *int) ([]reviews.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByChef", ctx, chefID, includeOnly, limit)
	ret0, _ := ret[0].([]reviews.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByChef indicates an expected call of ListByChef.
func (mr *MockreviewRepoMockRecorder) ListByChef(ctx, chefID, includeOnly, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByChef", reflect.TypeOf((*MockreviewRepo)(nil).ListByChef), ctx, chefID, includeOnly, limit)
}

// SoftDelete mocks base method.
func (m *MockreviewRepo) SoftDelete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockreviewRepoMockRecorder) SoftDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockreviewRepo)(nil).SoftDelete), ctx, id)
}

// Update mocks base method.
func (m *MockreviewRepo) Update(ctx context.Context, rv *reviews.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockreviewRepoMockRecorder) Update(ctx, rv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockreviewRepo)(nil).Update), ctx, rv)
}

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockuserRepo) GetByID(ctx context.Context, id int64) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserRepo)(nil).GetByID), ctx, id)
}

// MockKafkaWriter is a mock of KafkaWriter interface.
type MockKafkaWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaWriterMockRecorder
}

// MockKafkaWriterMockRecorder is the mock recorder for MockKafkaWriter.
type MockKafkaWriterMockRecorder struct {
	mock *MockKafkaWriter
}

// NewMockKafkaWriter creates a new mock instance.
func NewMockKafkaWriter(ctrl *gomock.Controller) *MockKafkaWriter {
	mock := &MockKafkaWriter{ctrl: ctrl}
	mock.recorder = &MockKafkaWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaWriter) EXPECT() *MockKafkaWriterMockRecorder {
	return m.recorder
}

// WriteMessages mocks base method.
func (m *MockKafkaWriter) WriteMessages(arg0 context.Context, arg1 ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockKafkaWriterMockRecorder) WriteMessages(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockKafkaWriter)(nil).WriteMessages), varargs...)
}

// MockorderRepo is a mock of orderRepo interface.
type MockorderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockorderRepoMockRecorder
}

// MockorderRepoMockRecorder is the mock recorder for MockorderRepo.
type MockorderRepoMockRecorder struct {
	mock *MockorderRepo
}

// NewMockorderRepo creates a new mock instance.
func NewMockorderRepo(ctrl *gomock.Controller) *MockorderRepo {
	mock := &MockorderRepo{ctrl: ctrl}
	mock.recorder = &MockorderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderRepo) EXPECT() *MockorderRepoMockRecorder {
	return m.recorder
}

// GetCartItemsByOrderID mocks base method.
func (m *MockorderRepo) GetCartItemsByOrderID(ctx context.Context, orderID int64) ([]cart.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]cart.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByOrderID indicates an expected call of GetCartItemsByOrderID.
func (mr *MockorderRepoMockRecorder) GetCartItemsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByOrderID", reflect.TypeOf((*MockorderRepo)(nil).GetCartItemsByOrderID), ctx, orderID)
}
