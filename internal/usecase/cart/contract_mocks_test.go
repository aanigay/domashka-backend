// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package cart is a generated GoMock package.
package cart

import (
	context "context"
	cart "domashka-backend/internal/entity/cart"
	dishes "domashka-backend/internal/entity/dishes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockCartRepository) AddItem(ctx context.Context, userID int64, dish dishes.Dish, sizeID int64, addedIngredients, removedIngredients []int64, notes string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, userID, dish, sizeID, addedIngredients, removedIngredients, notes)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItem indicates an expected call of AddItem.
func (mr *MockCartRepositoryMockRecorder) AddItem(ctx, userID, dish, sizeID, addedIngredients, removedIngredients, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockCartRepository)(nil).AddItem), ctx, userID, dish, sizeID, addedIngredients, removedIngredients, notes)
}

// Clear mocks base method.
func (m *MockCartRepository) Clear(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockCartRepositoryMockRecorder) Clear(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCartRepository)(nil).Clear), ctx, userID)
}

// DecrementCartItemQuantity mocks base method.
func (m *MockCartRepository) DecrementCartItemQuantity(ctx context.Context, cartItemID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementCartItemQuantity", ctx, cartItemID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementCartItemQuantity indicates an expected call of DecrementCartItemQuantity.
func (mr *MockCartRepositoryMockRecorder) DecrementCartItemQuantity(ctx, cartItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCartItemQuantity", reflect.TypeOf((*MockCartRepository)(nil).DecrementCartItemQuantity), ctx, cartItemID)
}

// GetCartItems mocks base method.
func (m *MockCartRepository) GetCartItems(ctx context.Context, userID int64) ([]cart.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", ctx, userID)
	ret0, _ := ret[0].([]cart.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockCartRepositoryMockRecorder) GetCartItems(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockCartRepository)(nil).GetCartItems), ctx, userID)
}

// GetCartItemsByOrderID mocks base method.
func (m *MockCartRepository) GetCartItemsByOrderID(ctx context.Context, orderID int64) ([]cart.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]cart.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByOrderID indicates an expected call of GetCartItemsByOrderID.
func (mr *MockCartRepositoryMockRecorder) GetCartItemsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByOrderID", reflect.TypeOf((*MockCartRepository)(nil).GetCartItemsByOrderID), ctx, orderID)
}

// IncrementCartItemQuantity mocks base method.
func (m *MockCartRepository) IncrementCartItemQuantity(ctx context.Context, cartItemID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCartItemQuantity", ctx, cartItemID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementCartItemQuantity indicates an expected call of IncrementCartItemQuantity.
func (mr *MockCartRepositoryMockRecorder) IncrementCartItemQuantity(ctx, cartItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCartItemQuantity", reflect.TypeOf((*MockCartRepository)(nil).IncrementCartItemQuantity), ctx, cartItemID)
}

// RemoveItem mocks base method.
func (m *MockCartRepository) RemoveItem(ctx context.Context, cartItemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", ctx, cartItemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockCartRepositoryMockRecorder) RemoveItem(ctx, cartItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockCartRepository)(nil).RemoveItem), ctx, cartItemID)
}
