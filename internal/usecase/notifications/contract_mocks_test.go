// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package notifications is a generated GoMock package.
package notifications

import (
	context "context"
	notifications "domashka-backend/internal/entity/notifications"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockNotificationRepository) CreateNotification(ctx context.Context, n notifications.Notification) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, n)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationRepositoryMockRecorder) CreateNotification(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationRepository)(nil).CreateNotification), ctx, n)
}

// GetNotificationByID mocks base method.
func (m *MockNotificationRepository) GetNotificationByID(ctx context.Context, id int) (*notifications.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, id)
	ret0, _ := ret[0].(*notifications.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockNotificationRepositoryMockRecorder) GetNotificationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotificationByID), ctx, id)
}

// GetNotifications mocks base method.
func (m *MockNotificationRepository) GetNotifications(ctx context.Context, filters map[string]string, page, limit int) ([]notifications.Notification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, filters, page, limit)
	ret0, _ := ret[0].([]notifications.Notification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockNotificationRepositoryMockRecorder) GetNotifications(ctx, filters, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotifications), ctx, filters, page, limit)
}

// UpdateNotification mocks base method.
func (m *MockNotificationRepository) UpdateNotification(ctx context.Context, id int, n notifications.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", ctx, id, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockNotificationRepositoryMockRecorder) UpdateNotification(ctx, id, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockNotificationRepository)(nil).UpdateNotification), ctx, id, n)
}

// MockSMTPClient is a mock of SMTPClient interface.
type MockSMTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPClientMockRecorder
}

// MockSMTPClientMockRecorder is the mock recorder for MockSMTPClient.
type MockSMTPClientMockRecorder struct {
	mock *MockSMTPClient
}

// NewMockSMTPClient creates a new mock instance.
func NewMockSMTPClient(ctrl *gomock.Controller) *MockSMTPClient {
	mock := &MockSMTPClient{ctrl: ctrl}
	mock.recorder = &MockSMTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPClient) EXPECT() *MockSMTPClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSMTPClient) SendEmail(ctx context.Context, to, subject string, data notifications.EmailData) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, to, subject, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSMTPClientMockRecorder) SendEmail(ctx, to, subject, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSMTPClient)(nil).SendEmail), ctx, to, subject, data)
}
